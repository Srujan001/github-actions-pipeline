name: Build, Auto-Merge and Notify

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, master, develop]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov flake8
          
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          
      - name: Run tests
        run: |
          pytest --cov=./ --cov-report=xml
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: coverage.xml
          
      - name: Build status check
        id: build_status
        run: |
          echo "::set-output name=status::success"
  
  auto_merge:
    name: Auto-Merge PR
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.actor != 'dependabot[bot]'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Check if PR is approved
        id: check_approved
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            const approvals = reviews.filter(review => review.state === 'APPROVED');
            
            if (approvals.length >= 1) {
              console.log('PR has required approvals');
              return true;
            } else {
              console.log('PR does not have required approvals');
              return false;
            }
              
      - name: Auto-merge PR
        if: steps.check_approved.outputs.result == 'true'
        uses: pascalgn/automerge-action@v0.15.6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MERGE_METHOD: "squash"
          MERGE_LABELS: "automerge,!work in progress"
          MERGE_DELETE_BRANCH: "true"
          MERGE_RETRY_SLEEP: "60000"
          
  notify:
    name: Send Notifications
    needs: [build, auto_merge]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Create notification message
        id: notification
        run: |
          build_status="${{ needs.build.result }}"
          auto_merge_status="${{ needs.auto_merge.result }}"
          
          echo "::set-output name=message::Build: $build_status | Auto-merge: $auto_merge_status"
          
      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.24.0
        if: ${{ env.SLACK_WEBHOOK_URL }}
        with:
          payload: |
            {
              "text": "GitHub Action Results: ${{ steps.notification.outputs.message }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "GitHub Action Results"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref }}\n*Status:* ${{ steps.notification.outputs.message }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
          
      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        if: ${{ env.MAIL_SERVER }}
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: GitHub Action Results - ${{ github.repository }}
          body: |
            GitHub Action Results:
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Status: ${{ steps.notification.outputs.message }}
          to: ${{ secrets.MAIL_RECIPIENT }}
          from: GitHub Actions

      - name: Run custom notification script
        run: |
          pip install requests
          python ./.github/scripts/custom_notification.py "${{ steps.notification.outputs.message }}" "${{ github.repository }}" "${{ github.ref }}"
        env:
          CUSTOM_WEBHOOK_URL: ${{ secrets.CUSTOM_WEBHOOK_URL }}
          CUSTOM_API_KEY: ${{ secrets.CUSTOM_API_KEY }}
